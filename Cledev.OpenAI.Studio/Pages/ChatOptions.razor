@using Cledev.OpenAI.V1.Contracts.Chats

@if (Request is not null)
{
    <div class="row mb-3">
        <FormLabel InputId="Model" InColumn="@InColumn" Tooltip="@Tooltips.Model">Model</FormLabel>
        <div class="col-sm">
            <InputSelect id="Model" @bind-Value="Request.Model" class="form-select">
                @foreach (var item in ChatModels)
                {
                    <option value="@item">@item</option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="row mb-3">
        <FormLabel InputId="MaxTokens" InColumn="@InColumn" Tooltip="@Tooltips.MaxTokens">Max Tokens</FormLabel>
        <div class="col-sm">
            <InputNumber id="MaxTokens" @bind-Value="Request.MaxTokens" class="form-control" />
        </div>
    </div>
    <div class="row mb-3">
        <FormLabel InputId="Temperature" InColumn="@InColumn" Tooltip="@Tooltips.Temperature">Temperature</FormLabel>
        <div class="col-sm">
            <InputNumber id="Temperature" @bind-Value="Request.Temperature" @bind-Value:format="F2" class="form-control" />
        </div>
    </div>
    <div class="row mb-3">
        <FormLabel InputId="TopP" InColumn="@InColumn" Tooltip="@Tooltips.TopP">TopP</FormLabel>
        <div class="col-sm">
            <InputNumber id="TopP" @bind-Value="Request.TopP" @bind-Value:format="F2" class="form-control" />
        </div>
    </div>
    <div class="row mb-3">
        <FormLabel InputId="N" InColumn="@InColumn" Tooltip="@Tooltips.N">N</FormLabel>
        <div class="col-sm">
            <InputNumber id="N" @bind-Value="Request.N" class="form-control" />
        </div>
    </div>
    <div class="row mb-3 align-items-center">
        <FormLabel InputId="Stream" InColumn="@InColumn" Tooltip="@Tooltips.Stream">Stream</FormLabel>
        <div class="col-sm">
            <InputCheckbox id="Stream" @bind-Value="Request.Stream" class="form-check-input" />
        </div>
    </div>
    <div class="row mb-3">
        <FormLabel InputId="Stop" InColumn="@InColumn" Tooltip="@Tooltips.Stop">Stop</FormLabel>
        <div class="col-sm">
            <InputText id="Stop" @bind-Value="Request.Stop" class="form-control" />
        </div>
    </div>
    <div class="row mb-3">
        <FormLabel InputId="PresencePenalty" InColumn="@InColumn" Tooltip="@Tooltips.PresencePenalty">Presence Penalty</FormLabel>
        <div class="col-sm">
            <InputNumber id="PresencePenalty" @bind-Value="Request.PresencePenalty" @bind-Value:format="F2" class="form-control" />
        </div>
    </div>
    <div class="row mb-3">
        <FormLabel InputId="FrequencyPenalty" InColumn="@InColumn" Tooltip="@Tooltips.FrequencyPenalty">Frequency Penalty</FormLabel>
        <div class="col-sm">
            <InputNumber id="FrequencyPenalty" @bind-Value="Request.FrequencyPenalty" @bind-Value:format="F2" class="form-control" />
        </div>
    </div>
    <div class="row mb-3">
        <FormLabel InputId="LogitBias" InColumn="@InColumn" Tooltip="@Tooltips.LogitBias">Logit Bias</FormLabel>
        <div class="col-sm">
            <InputTextArea id="LogitBias" @bind-Value="Request.LogitBias" class="form-control" />
        </div>
    </div>
    <div class="row mb-3">
        <FormLabel InputId="User" InColumn="@InColumn" Tooltip="@Tooltips.User">User</FormLabel>
        <div class="col-sm">
            <InputText id="User" @bind-Value="Request.User" class="form-control" />
        </div>
    </div>
}

@code {
    [Parameter] public CreateChatCompletionRequest? Request { get; set; }
    [Parameter] public IList<string> ChatModels { get; set; } = new List<string>();
    [Parameter] public bool InColumn { get; set; }

    protected static class Tooltips
    {
        public static string Model = "Required. ID of the model to use. Currently, only gpt-3.5-turbo and gpt-3.5-turbo-0301 are supported.";
        public static string MaxTokens = "Optional (Defaults to 16). The maximum number of tokens to generate in the completion. The token count of your prompt plus max_tokens cannot exceed the model's context length. Most models have a context length of 2048 tokens (except for the newest models, which support 4096).";
        public static string Temperature = "Optional (Defaults to 1). What sampling temperature to use. Higher values means the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer. We generally recommend altering this or top_p but not both.";
        public static string TopP = "Optional (Defaults to 1). An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.";
        public static string N = "Optional (Defaults to 1). How many completions to generate for each prompt. Note: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for max_tokens and stop.";
        public static string Stream = "Optional (Defaults to false). Whether to stream back partial progress. If set, tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message.";
        public static string Stop = "Optional (Defaults to null). Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.";
        public static string PresencePenalty = "Optional (Defaults to 0). Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.";
        public static string FrequencyPenalty = "Optional (Defaults to 0). Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.";
        public static string LogitBias = "Optional (Defaults to null). Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this tokenizer tool (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. As an example, you can pass {'50256': -100} to prevent the <|endoftext|> token from being generated.";
        public static string User = "Optional. A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.";
    }
}
